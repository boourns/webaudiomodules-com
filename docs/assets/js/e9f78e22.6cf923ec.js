"use strict";(self.webpackChunkwebaudiomodules_com=self.webpackChunkwebaudiomodules_com||[]).push([[309],{5810:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var n=s(4848),a=s(8453);const r={},o=void 0,i={id:"usage/generate-with-faust",title:"generate-with-faust",description:"1 - Faust2Wam node script:",source:"@site/content/usage/generate-with-faust.md",sourceDirName:"usage",slug:"/usage/generate-with-faust",permalink:"/docs/usage/generate-with-faust",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"About WAM extensions",permalink:"/docs/usage/extensions"},next:{title:"Examples",permalink:"/docs/examples"}},c={},d=[];function u(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"1 - Faust2Wam node script:"}),"\n",(0,n.jsxs)(t.p,{children:["You can generate WAMs directly from the command line using the faust2wam script (you can get it here: ",(0,n.jsx)(t.a,{href:"https://github.com/Fr0stbyteR/faust2wam",children:"https://github.com/Fr0stbyteR/faust2wam"}),")"]}),"\n",(0,n.jsx)(t.p,{children:"Example of use :"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-shell",children:"rm -rf test/out # make sure you are under the faust2wam directory.\nnode faust2wam.js test/rev.dsp test/out\n"})}),"\n",(0,n.jsx)(t.p,{children:"2 - Dynamic WAM compilation"}),"\n",(0,n.jsxs)(t.p,{children:["You can also dynamically compile faust code from your host and generate WAMs on the fly (info also on ",(0,n.jsx)(t.a,{href:"https://github.com/Fr0stbyteR/faust2wam",children:"https://github.com/Fr0stbyteR/faust2wam"}),")"]}),"\n",(0,n.jsx)(t.p,{children:"Example of use:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:'// Load the WAM\n\tconst { default: generate } = await import("./dist/index.js");\n\t// Load the DSP file\n\tconst dspResp = await fetch("./test/rev.dsp");\n\t// Generate the WAM\n\tconst WAM = await generate(await dspResp.text(), "Reverb");\n'})}),"\n",(0,n.jsxs)(t.p,{children:["3 - FAUST based WAMs with spectral processing (FFT): read Shihong Ren paper presented at WAC 2024 (read it here: ",(0,n.jsx)(t.a,{href:"https://zenodo.org/records/10825715",children:"https://zenodo.org/records/10825715"}),") or see the slides:"]}),"\n",(0,n.jsx)("iframe",{style:{width:"100%",height:500},src:"https://docs.google.com/presentation/d/14KPvTzICJbqjXVUGKfwjdRSdTXtSsgFfIzSKFWqZrOU/edit?usp=sharing"})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>i});var n=s(6540);const a={},r=n.createContext(a);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);